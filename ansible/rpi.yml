# Ansible playbook for Raspberry Pi boxus host setup
---
- hosts: pi_hosts
  # vars:
  #   http_port: 80
  #   max_clients: 200
  # remote_user: "{{ ansible_ssh_user }}"
  remote_user: pi

  # vars_prompt:
  # - name: ansible_ssh_user
  #   prompt: SSH username?
  # - name: ansible_ssh_pass
  #   prompt: SSH user password?

  tasks:

##### System-wide preparations

  - name: Make sure we have a 'wheel' group
    become: yes
    group:
      name: wheel
      state: present

  - name: Allow 'wheel' group to have passwordless sudo
    become: yes
    lineinfile:
      dest: /etc/sudoers
      state: present
      regexp: '^%wheel'
      line: '%wheel ALL=(ALL) NOPASSWD: ALL'
      validate: 'visudo -cf %s'

  - name: Add user 'pi' to 'gpio' group
    become: yes
    user:
      name: pi
      groups: gpio
      append: yes

  - name: Create your local user copy
    become: yes
    user:
      name: "{{ lookup('env', 'USER') }}"
      groups: sudo, wheel, gpio
      shell: /bin/bash
      state: present
  
  - name: Create 'boxus' user
    become: yes
    user:
      name: boxus
      groups: gpio, video
      shell: /bin/bash
      state: present

  - name: Copy vim config to 'boxus'
    become: yes
    copy:
      src: templates/.vimrc
      dest: /home/boxus/
      owner: boxus
      group: boxus
      mode: 0644

  - name: Set authorized key took from file
    become: yes
    authorized_key:
      user: "{{ item }}"
      state: present
      key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
    with_items:
      - "{{ ansible_user_id }}"
      - "{{ lookup('env', 'USER') }}"

  - name: Install apt-get packages
    become: yes
    apt: "pkg={{ item }} state=installed"
    with_items:
      - fswebcam

  - name: Copy vim config to 'pi'
    copy:
      src: templates/.vimrc
      dest: /home/pi/
      owner: pi
      group: pi
      mode: 0644

##### PostgreSQL setup

  # - name: Install PostgreSQL and dependencies via apt-get
  #   become: yes
  #   apt: "pkg={{ item }} state=installed"
  #   with_items:
  #     - postgresql
  #     - libpq-dev
  #     - postgresql-client

  # - name: Start PG on boot
  #   become: yes
  #   service: name=postgresql state=started enabled=yes

  # # - name: Start PG on boot
  # #   become: yes
  # #   systemd:
  # #     name: postgresql
  # #     enabled: yes
  # #     state: started

  # # - name: Just force systemd to reread configs (2.4 and above)
  # #   become: yes
  # #   systemd: daemon_reload=yes

  # # - name: Start PG
  # #   become: yes
  # #   service: name=postgresql state=started

  # - name: Install Python requirements
  #   pip: "name={{ item }}"
  #   with_items:
  #     - psycopg2
  #   become: yes

  # - name: Create PG users
  #   postgresql_user: "name={{ item }}"
  #   become: yes
  #   become_user: postgres
  #   with_items:
  #     - "{{ ansible_user_id }}"
  #     - "{{ lookup('env', 'USER') }}"
